import telebot
import os
from dotenv import load_dotenv
from pymongo import MongoClient

# ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))
ACTIVATION_FEE = 50
REFERRAL_REWARD = 20
MIN_WITHDRAW_AMOUNT = 50
MIN_RECHARGE_AMOUNT = 20
PAYMENT_NUMBER = os.getenv('PAYMENT_NUMBER')
GROUP_LINK = os.getenv('GROUP_LINK')
MONGO_URI = os.getenv('MONGO_URI')

# MongoDB рж╕ржВржпрзЛржЧ
client = MongoClient(MONGO_URI)
db = client['telegram_bot']
collection = db['users']

bot = telebot.TeleBot(TOKEN)

def load_data():
    try:
        return {doc['_id']: doc for doc in collection.find()}
    except Exception as e:
        print(f"ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")
        return {}

def save_data(data):
    try:
        for user_id, user_data in data.items():
            collection.update_one({'_id': user_id}, {'$set': user_data}, upsert=True)
    except Exception as e:
        print(f"ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")

def is_user_activated(user_id):
    data = load_data()
    return str(user_id) in data and data[str(user_id)]['activated']

def activate_user(user_id):
    data = load_data()
    user_id_str = str(user_id)
    if user_id_str in data:
        data[user_id_str]['activated'] = True
        ref = data[user_id_str].get('ref')
        if ref and str(ref) in data:
            data[str(ref)]['balance'] += REFERRAL_REWARD
            try:
                bot.send_message(int(ref), f"ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржЗржЙржЬрж╛рж░ ржПржХрзНржЯрж┐ржн рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж┐ ржкрзЗржпрж╝рзЗржЫрзЗржи {REFERRAL_REWARD} ржЯрж╛ржХрж╛ред")
            except Exception as e:
                print(f"рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")
        save_data(data)

def main_menu_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('ржЖржорж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓', 'рж░рзЗржлрж╛рж░')
    markup.row('ржЙржЗржержбрзНрж░', 'рж░рж┐ржЪрж╛рж░рзНржЬ')
    markup.row('ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи рж╣рж┐рж╕рзНржЯрзНрж░рж┐', 'ржпрзЛржЧрж╛ржпрзЛржЧ')
    return markup

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = str(message.chat.id)
    username = message.from_user.username or 'ржирж╛ржо ржирзЗржЗ'
    args = message.text.split()
    ref = args[1] if len(args) > 1 else None

    data = load_data()
    if user_id not in data:
        data[user_id] = {
            'username': username,
            'ref': ref,
            'activated': False,
            'balance': 0,
            'withdraw_history': [],
            'recharge_history': []
        }
        save_data(data)

    if is_user_activated(user_id):
        bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржЗрждрж┐ржоржзрзНржпрзЗ ржПржХрзНржЯрж┐ржнред", reply_markup=main_menu_keyboard())
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text="ЁЯСе ржЗржиржХрж╛ржо ржкрзНрж░рзБржл ржЧрзНрж░рзБржкрзЗ ржЬржпрж╝рзЗржи ржХрж░рзБржи", url=GROUP_LINK))
        welcome_message = (
            "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо!\n\n"
            "ржЖржкржирж┐ ржПржЦржи ржПржХржЯрж┐ рж░рж┐ржпрж╝рзЗрж▓ ржЗржиржХрж╛ржо рж╕рж┐рж╕рзНржЯрзЗржорзЗ ржЖржЫрзЗржи, ржпрзЗржЦрж╛ржирзЗ рж╢рзБржзрзБ рж░рзЗржлрж╛рж░ ржХрж░рзЗржЗ ржЖржпрж╝ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\n"
            f"тЬЕ ржкрзНрж░рждрж┐ ржПржХрзНржЯрж┐ржн рж░рзЗржлрж╛рж░рзЗ ржкрж╛ржмрзЗржи {REFERRAL_REWARD} ржЯрж╛ржХрж╛ред\n\n"
            "ЁЯУМ ржЖржорж╛ржжрзЗрж░ рж╕рж┐рж╕рзНржЯрзЗржо рззрзжрзж% ржмрж┐рж╢рзНржмрж╛рж╕ржпрзЛржЧрзНржп, рж╕рзНржХрзНржпрж╛ржо ржиржпрж╝ред\n\n"
            f"ЁЯФУ ржПржХрж╛ржЙржирзНржЯ ржПржХрзНржЯрж┐ржн ржХрж░рждрзЗ ржорж╛рждрзНрж░ {ACTIVATION_FEE} ржЯрж╛ржХрж╛ ржмрж┐ржХрж╛рж╢/ржиржЧржж ржХрж░рзБржи:\n"
            f"ЁЯУ▓ ржирж╛ржорзНржмрж╛рж░: {PAYMENT_NUMBER}\n\n"
            "ЁЯУй рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж┐ржпрж╝рзЗ ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред\n\n"
            "ЁЯЪА рж╢рзБрж░рзБ ржХрж░рзБржи, ржмржбрж╝ ржЗржиржХрж╛ржорзЗрж░ ржкржерзЗ!"
        )
        bot.send_message(message.chat.id, welcome_message, reply_markup=markup)

@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.chat.id)
    if is_user_activated(user_id):
        bot.reply_to(message, "тЬЕ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржЗрждрж┐ржоржзрзНржпрзЗ ржПржХрзНржЯрж┐ржнред")
        return
    try:
        bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
        bot.reply_to(message, "тЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржЕрзНржпрж╛ржбржорж┐ржи рж╢рзАржШрзНрж░ржЗ ржпрж╛ржЪрж╛ржЗ ржХрж░ржмрзЗред")
    except Exception as e:
        bot.reply_to(message, "тЪая╕П рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛рждрзЗ рждрзНрж░рзБржЯрж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        print(f"рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржлрж░рзЛржпрж╝рж╛рж░рзНржбрзЗ рждрзНрж░рзБржЯрж┐: {e}")

@bot.message_handler(commands=['approve'])
def approve_user(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.reply_to(message, "тЪая╕П рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред")
        return
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(message, "тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /approve <chat_id>")
        return
    target_id = args[1]
    data = load_data()
    if target_id not in data:
        bot.reply_to(message, "тЭМ ржЗржЙржЬрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return
    activate_user(target_id)
    try:
        bot.send_message(int(target_id), "тЬЕ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржЕрзНржпрж╛ржбржорж┐ржи ржжрзНржмрж╛рж░рж╛ ржПржХрзНржЯрж┐ржн ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржПржЦржи ржЖржкржирж┐ рж░рзЗржлрж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред", reply_markup=main_menu_keyboard())
        bot.reply_to(message, f"тЬЕ {target_id} ржПржХрж╛ржЙржирзНржЯ ржПржХрзНржЯрж┐ржнрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    except Exception as e:
        bot.reply_to(message, f"тЪая╕П {target_id}-ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")

@bot.message_handler(commands=['remove'])
def remove_user(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.reply_to(message, "тЪая╕П рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред")
        return
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(message, "тЪая╕П ржмрзНржпржмрж╣рж╛рж░: /remove <chat_id>")
        return
    target_id = args[1]
    data = load_data()
    if target_id in data:
        collection.delete_one({'_id': target_id})
        bot.reply_to(message, f"тЬЕ ржЗржЙржЬрж╛рж░ {target_id} ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        bot.reply_to(message, "тЭМ ржЗржЙржЬрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")

@bot.message_handler(func=lambda message: True)
def main_handler(message):
    user_id = str(message.chat.id)
    text = message.text

    data = load_data()
    if user_id not in data:
        bot.send_message(message.chat.id, "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ /start ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред")
        return

    if text == 'ржЖржорж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓':
        user = data[user_id]
        profile_text = (
            f"ЁЯСд ржЗржЙржЬрж╛рж░: @{user.get('username', 'ржирж╛ржо ржирзЗржЗ')}\n"
            f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {user.get('balance', 0)} ржЯрж╛ржХрж╛\n"
            f"ЁЯФЧ рж░рзЗржлрж╛рж░рж╛рж░: @{data.get(str(user.get('ref')), {}).get('username', 'ржирж╛ ржЖржЫрзЗ')}\n"
            f"ЁЯФУ ржПржХрзНржЯрж┐ржнрзЗржЯрзЗржб: {'рж╣рзНржпрж╛ржБ' if user.get('activated') else 'ржирж╛'}"
        )
        bot.send_message(message.chat.id, profile_text, reply_markup=main_menu_keyboard())

    elif text == 'рж░рзЗржлрж╛рж░':
        try:
            bot_username = bot.get_me().username
            ref_link = f"https://t.me/{bot_username}?start={user_id}"
            bot.send_message(message.chat.id, f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:\n{ref_link}", reply_markup=main_menu_keyboard())
        except Exception as e:
            bot.send_message(message.chat.id, "тЪая╕П рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ рждрзИрж░рж┐ ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐ред", reply_markup=main_menu_keyboard())
            print(f"рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ рждрзНрж░рзБржЯрж┐: {e}")

    elif text == 'ржЙржЗржержбрзНрж░':
        if not is_user_activated(user_id):
            bot.send_message(message.chat.id, "тЭМ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржПржХрзНржЯрж┐ржн ржиржпрж╝ред ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрж░рзБржиред")
            return
        bot.send_message(message.chat.id, f"ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {data[user_id]['balance']} ржЯрж╛ржХрж╛ред\n"
                                          f"рж╕рж░рзНржмржирж┐ржорзНржи ржЙржЗржержбрзНрж░: {MIN_WITHDRAW_AMOUNT} ржЯрж╛ржХрж╛ред\n"
                                          "ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ /withdraw_amount <ржЯрж╛ржХрж╛> рж▓рж┐ржЦрзБржиред", reply_markup=main_menu_keyboard())

    elif text.startswith('/withdraw_amount'):
        if not is_user_activated(user_id):
            bot.send_message(message.chat.id, "тЭМ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржПржХрзНржЯрж┐ржн ржиржпрж╝ред ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрж░рзБржиред")
            return
        parts = text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.send_message(message.chat.id, "тЪая╕П рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: /withdraw_amount <ржЯрж╛ржХрж╛>")
            return
        amount = int(parts[1])
        if amount < MIN_WITHDRAW_AMOUNT:
            bot.send_message(message.chat.id, f"тЪая╕П рж╕рж░рзНржмржирж┐ржорзНржи ржЙржЗржержбрзНрж░ {MIN_WITHDRAW_AMOUNT} ржЯрж╛ржХрж╛ред")
            return
        if data[user_id]['balance'] < amount:
            bot.send_message(message.chat.id, "тЪая╕П ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржкрж░рзНржпрж╛ржкрзНржд ржиржпрж╝ред")
            return
        data[user_id]['balance'] -= amount
        data[user_id]['withdraw_history'].append(amount)
        save_data(data)
        try:
            bot.send_message(ADMIN_CHAT_ID, f"ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ: ржЗржЙржЬрж╛рж░ {user_id}, ржкрж░рж┐ржорж╛ржг: {amount} ржЯрж╛ржХрж╛")
            bot.send_message(message.chat.id, f"тЬЕ ржЖржкржирж┐ {amount} ржЯрж╛ржХрж╛ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржХрж░рзЗржЫрзЗржиред ржЕрзНржпрж╛ржбржорж┐ржи ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░ржмрзЗред")
        except Exception as e:
            bot.send_message(message.chat.id, "тЪая╕П ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрзНрж░рж╕рзЗрж╕рзЗ рждрзНрж░рзБржЯрж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
            print(f"ржЙржЗржержбрзНрж░ рждрзНрж░рзБржЯрж┐: {e}")

    elif text == 'рж░рж┐ржЪрж╛рж░рзНржЬ':
        if not is_user_activated(user_id):
            bot.send_message(message.chat.id, "тЭМ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржПржХрзНржЯрж┐ржн ржиржпрж╝ред ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрж░рзБржиред")
            return
        bot.send_message(message.chat.id, f"рж░рж┐ржЪрж╛рж░рзНржЬ ржХрж░рждрзЗ /recharge_amount <ржЯрж╛ржХрж╛> рж▓рж┐ржЦрзБржиред\n"
                                          f"рж╕рж░рзНржмржирж┐ржорзНржи рж░рж┐ржЪрж╛рж░рзНржЬ: {MIN_RECHARGE_AMOUNT} ржЯрж╛ржХрж╛ред\n"
                                          f"ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░: {PAYMENT_NUMBER}", reply_markup=main_menu_keyboard())

    elif text.startswith('/recharge_amount'):
        if not is_user_activated(user_id):
            bot.send_message(message.chat.id, "тЭМ ржЖржкржирж╛рж░ ржПржХрж╛ржЙржирзНржЯ ржПржХрзНржЯрж┐ржн ржиржпрж╝ред ржПржХрзНржЯрж┐ржнрзЗрж╢ржи ржХрж░рзБржиред")
            return
        parts = text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.send_message(message.chat.id, "тЪая╕П рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: /recharge_amount <ржЯрж╛ржХрж╛>")
            return
        amount = int(parts[1])
        if amount < MIN_RECHARGE_AMOUNT:
            bot.send_message(message.chat.id, f"тЪая╕П рж╕рж░рзНржмржирж┐ржорзНржи рж░рж┐ржЪрж╛рж░рзНржЬ {MIN_RECHARGE_AMOUNT} ржЯрж╛ржХрж╛ред")
            return
        data[user_id]['recharge_history'].append(amount)
        save_data(data)
        try:
            bot.send_message(ADMIN_CHAT_ID, f"ржирждрзБржи рж░рж┐ржЪрж╛рж░рзНржЬ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ: ржЗржЙржЬрж╛рж░ {user_id}, ржкрж░рж┐ржорж╛ржг: {amount} ржЯрж╛ржХрж╛")
            bot.send_message(message.chat.id, f"тЬЕ ржЖржкржирж╛рж░ {amount} ржЯрж╛ржХрж╛ рж░рж┐ржЪрж╛рж░рзНржЬ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржиред")
        except Exception as e:
            bot.send_message(message.chat.id, "тЪая╕П рж░рж┐ржЪрж╛рж░рзНржЬ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрзНрж░рж╕рзЗрж╕рзЗ рждрзНрж░рзБржЯрж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
            print(f"рж░рж┐ржЪрж╛рж░рзНржЬ рждрзНрж░рзБржЯрж┐: {e}")

    elif text == 'ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи рж╣рж┐рж╕рзНржЯрзНрж░рж┐':
        user = data[user_id]
        withdraws = user.get('withdraw_history', [])
        recharges = user.get('recharge_history', [])
        history_text = "ЁЯУЬ ржЯрзНрж░рж╛ржиржЬрзНржпрж╛ржХрж╢ржи рж╣рж┐рж╕рзНржЯрзНрж░рж┐:\n\n"
        history_text += "ржЙржЗржержбрзНрж░:\n" + "\n".join([f"- {amt} ржЯрж╛ржХрж╛" for amt in withdraws]) + "\n\n" if withdraws else "ржЙржЗржержбрзНрж░: ржХрзЛржирзЛ рж░рзЗржХрж░рзНржб ржирзЗржЗ\n\n"
        history_text += "рж░рж┐ржЪрж╛рж░рзНржЬ:\n" + "\n".join([f"- {amt} ржЯрж╛ржХрж╛" for amt in recharges]) if recharges else "рж░рж┐ржЪрж╛рж░рзНржЬ: ржХрзЛржирзЛ рж░рзЗржХрж░рзНржб ржирзЗржЗ"
        bot.send_message(message.chat.id, history_text, reply_markup=main_menu_keyboard())

    elif text == 'ржпрзЛржЧрж╛ржпрзЛржЧ':
        bot.send_message(message.chat.id, "ржЖржкржирж┐ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи @setusername00_00_is_available", reply_markup=main_menu_keyboard())

    else:
        bot.send_message(message.chat.id, "тЪая╕П ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐, ржжржпрж╝рж╛ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржерзЗржХрзЗ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржиред", reply_markup=main_menu_keyboard())

if __name__ == '__main__':
    bot.remove_webhook()
    bot.polling(none_stop=True)
